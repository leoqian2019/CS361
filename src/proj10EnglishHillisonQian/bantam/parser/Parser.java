/*
 * File: Scanner.java
 * Authors: Haoyu Song and Dale Skrien
 * Authors: Nick English, Nico Hillison, Leo Qian
 * Date: 5/5/22
 *
 * In the grammar below, the variables are enclosed in angle brackets and
 * "::=" is used instead of "-->" to separate a variable from its rules.
 * The special character "|" is used to separate the rules for each variable
 * (but note that "||" is an operator).
 * EMPTY indicates a rule with an empty right hand side.
 * All other symbols in the rules are terminals.
 */
package proj10EnglishHillisonQian.bantam.parser;

import javafx.util.Pair;
import proj10EnglishHillisonQian.bantam.ast.*;
import proj10EnglishHillisonQian.bantam.lexer.Scanner;
import proj10EnglishHillisonQian.bantam.lexer.Token;
import proj10EnglishHillisonQian.bantam.treedrawer.Drawer;
import proj10EnglishHillisonQian.bantam.util.CompilationException;
import proj10EnglishHillisonQian.bantam.util.Error;
import proj10EnglishHillisonQian.bantam.util.ErrorHandler;

import java.util.HashMap;
import java.util.LinkedList;

import static proj10EnglishHillisonQian.bantam.lexer.Token.Kind.*;

/**
 * Reads in Tokens from a Scanner and constructs an AST.
 */
public class Parser
{
    // instance variables
    private Scanner scanner; // provides the tokens
    private Token currentToken; // the lookahead token
    private ErrorHandler errorHandler; // collects & organizes the error messages
    private String filename; // name of file being parsed
    // constructor
    public Parser(ErrorHandler errorHandler) {
        this.errorHandler = errorHandler;
    }

    /**
     * Output the map of comments.
     * @return the map of comments
     */
    public LinkedList<Pair<Integer, String>> getCommentQueue(){
        return this.scanner.getCommentQueue();
    }

    /**
     * parse the given file and return the root node of the AST
     * @param filename The name of the Bantam Java file to be parsed
     * @return The Program node forming the root of the AST generated by the parser
     */
    public Program parse(String filename) {
        this.scanner = new Scanner(filename, errorHandler);
        this.filename = filename;
        currentToken = scanner.scan();
        return parseProgram();
    }


    // <Program> ::= <Class> | <Class> <Program>
    private Program parseProgram() {
        int position = currentToken.position;
        ClassList clist = new ClassList(position);

        // continue to parse the class until reach the end of the file
        while (currentToken.kind != EOF) {
            Class_ aClass = parseClass();
            clist.addElement(aClass);
        }

        return new Program(position, clist);
    }


    // <Class> ::= CLASS <Identifier> <ExtendsClause> { <MemberList> }
    // <ExtendsClause> ::= EXTENDS <Identifier> | EMPTY
    // <MemberList> ::= EMPTY | <Member> <MemberList>
    private Class_ parseClass(){
        // if this is not a class token, throw an error message
        advanceIfTokenMatchesKind(CLASS);

        int pos = currentToken.position;
        // scan the name of the class
        String name = parseIdentifier();

        String parent = "Object";

        if(currentToken.kind == EXTENDS){
            currentToken = scanner.scan();
            parent = parseIdentifier();
        }

        advanceIfTokenMatchesKind(LCURLY);

        MemberList members = new MemberList(currentToken.position);
        // continue to add members to the memberList until reaches the right curly brace
        while(currentToken.kind != RCURLY){
            members.addElement(parseMember());
        }

        currentToken = scanner.scan();
        return new Class_(pos, filename, name, parent, members);
    }


    //Fields and Methods
    // <Member> ::= <Field> | <Method>
    // <Method> ::= <Type> <Identifier> ( <Parameters> ) <BlockStmt>
    // <Field> ::= <Type> <Identifier> <InitialValue> ;
    // <InitialValue> ::= EMPTY | = <Expression>
    private Member parseMember() {
        int pos = currentToken.position;
        String type = parseType();
        String name = parseIdentifier();

        // if this member is not a method
        if(currentToken.kind != LPAREN){
            Expr initVal = null;
            // if the field has an initial value
            if(currentToken.kind != SEMICOLON) {
                advanceIfTokenMatchesKind(ASSIGN);
                initVal = parseExpression();
                advanceIfTokenMatchesKind(SEMICOLON);
            } else {
                currentToken = scanner.scan();
            }
            return new Field(pos, type, name, initVal);
        } else {
            currentToken = scanner.scan();
            FormalList params = parseParameters();
            advanceIfTokenMatchesKind(RPAREN);
            StmtList body = parseBlock().getStmtList();
            return new Method(pos, type, name, params, body);
        }

    }


    //-----------------------------------
    //Statements
    // <Stmt> ::= <WhileStmt> | <ReturnStmt> | <BreakStmt> | <VarDeclaration>
    //             | <ExpressionStmt> | <ForStmt> | <BlockStmt> | <IfStmt>
    private Stmt parseStatement() {
            Stmt stmt;

            switch (currentToken.kind) {
                case IF:
                    stmt = parseIf();
                    break;
                case LCURLY:
                    stmt = parseBlock();
                    break;
                case VAR:
                    stmt = parseVarDeclaration();
                    break;
                case RETURN:
                    stmt = parseReturn();
                    break;
                case FOR:
                    stmt = parseFor();
                    break;
                case WHILE:
                    stmt = parseWhile();
                    break;
                case BREAK:
                    stmt = parseBreak();
                    break;
                default:
                    stmt = parseExpressionStmt();
            }

            return stmt;
    }


    // <WhileStmt> ::= WHILE ( <Expression> ) <Stmt>
    private Stmt parseWhile() {
        int pos = currentToken.position;
        // skip the word "WHILE" and continue to scan
        currentToken = scanner.scan();
        advanceIfTokenMatchesKind(LPAREN);
        Expr expr = parseExpression();
       advanceIfTokenMatchesKind(RPAREN);
        Stmt stmt = parseStatement();
        return new WhileStmt(pos, expr, stmt);
    }


    // <ReturnStmt> ::= RETURN <Expression> ; | RETURN ;
    private Stmt parseReturn() throws CompilationException {
        Expr expr = null;
        int pos = currentToken.position;
        currentToken = scanner.scan();
        // if the return function has something to return
        if(currentToken.kind != SEMICOLON){
            expr = parseExpression();
            advanceIfTokenMatchesKind(SEMICOLON);
        }
        else{
            currentToken = scanner.scan();
        }
        return new ReturnStmt(pos, expr);
    }


    // <BreakStmt> ::= BREAK ;
    private Stmt parseBreak() {
        int pos = currentToken.position;
        currentToken = scanner.scan();
        advanceIfTokenMatchesKind(SEMICOLON);
        return new BreakStmt(pos);
    }


    // <ExpressionStmt> ::= <Expression> ;
    private ExprStmt parseExpressionStmt() {
        int pos = currentToken.position;
        Expr expr = parseExpression();
        advanceIfTokenMatchesKind(SEMICOLON);
        return new ExprStmt(pos, expr);
    }


    // <VarDeclaration> ::= VAR <Id> = <Expression> ;
    // Every local variable must be initialized
    private DeclStmt parseVarDeclaration() {
        int pos = currentToken.position;
        currentToken = scanner.scan();
        // check for the name of the var declaration
        String name = parseIdentifier();

        advanceIfTokenMatchesKind(ASSIGN);

        // check for the init of the var
        Expr init = parseExpression();
        advanceIfTokenMatchesKind(SEMICOLON);
        return new DeclStmt(pos, name, init);
    }


    // <ForStmt> ::= FOR ( <Start> ; <Terminate> ; <Increment> ) <STMT>
    // <Start> ::=     EMPTY | <Expression>
    // <Terminate> ::= EMPTY | <Expression>
    // <Increment> ::= EMPTY | <Expression>
    private ForStmt parseFor() {
        int pos = currentToken.position;
        Expr start = null;
        Expr terminate = null;
        Expr increment = null;
        currentToken = scanner.scan();
        advanceIfTokenMatchesKind(LPAREN);
        // if the start statement is initialized
        if(currentToken.kind != SEMICOLON){
            start = parseExpression();
        }
        advanceIfTokenMatchesKind(SEMICOLON);
        // check if the termination statement is there
        if(currentToken.kind != SEMICOLON) {
            terminate = parseExpression();
        }
        advanceIfTokenMatchesKind(SEMICOLON);
        // check if the increment expression is there
        if(currentToken.kind != RPAREN) {
            increment = parseExpression();
        }
        advanceIfTokenMatchesKind(RPAREN);
        Stmt body = parseStatement();
        return new ForStmt(pos,start,terminate,increment,body);

    }


    // <BlockStmt> ::= { <Body> }
    // <Body> ::= EMPTY | <Stmt> <Body>
    private BlockStmt parseBlock() {
        int pos = currentToken.position;
        StmtList statements = new StmtList(pos);
        // check if the block start with Left curly
        advanceIfTokenMatchesKind(LCURLY);
        // continue to add statement to statement list until right curly
        while(currentToken.kind != RCURLY){
            statements.addElement(parseStatement());
        }
        currentToken = scanner.scan();
        return new BlockStmt(pos,statements);

    }


    // <IfStmt> ::= IF ( <Expr> ) <Stmt> | IF ( <Expr> ) <Stmt> ELSE <Stmt>
    private Stmt parseIf() {
        int pos = currentToken.position;
        Expr pred = null;
        Stmt then = null;
        Stmt elseStmt = null;

        currentToken = scanner.scan();
        advanceIfTokenMatchesKind(LPAREN);
        pred = parseExpression();
        advanceIfTokenMatchesKind(RPAREN);
        then = parseStatement();
        // if the if statement has an else clause, read the else
        if(currentToken.kind == ELSE){
            currentToken = scanner.scan();
            elseStmt = parseStatement();
        }
        return new IfStmt(pos,pred,then,elseStmt);
    }


    //-----------------------------------------
    // Expressions
    // Here we use different rules than the grammar on page 49
    // of the manual to handle the precedence of operations

    // <Expression> ::= <LogicalORExpr> <OptionalAssignment>
    // <OptionalAssignment> ::= EMPTY | = <Expression>
    private Expr parseExpression() {
        int pos = currentToken.position;
        Expr expr = parseOrExpr();
        // if this is an assignment expression, return an assignment expression object
        if(currentToken.kind == ASSIGN && (expr instanceof VarExpr)){
            currentToken = scanner.scan();
            Expr assign = parseExpression();
            return new AssignExpr(pos, null, ((VarExpr) expr).getName(), assign);
        }
        return expr;
    }


    // <LogicalOR> ::= <logicalAND> <LogicalORRest>
    // <LogicalORRest> ::= EMPTY |  || <LogicalAND> <LogicalORRest>
    private Expr parseOrExpr() {
        int position = currentToken.position;
        Expr left;

        left = parseAndExpr();
        // keep building the binary logic or expression when there's consecutive || symbol
        while (currentToken.spelling.equals("||")) {
            currentToken = scanner.scan();
            Expr right = parseAndExpr();
            left = new BinaryLogicOrExpr(position, left, right);
        }

        return left;
    }


    // <LogicalAND> ::= <ComparisonExpr> <LogicalANDRest>
    // <LogicalANDRest> ::= EMPTY |  && <ComparisonExpr> <LogicalANDRest>
    private Expr parseAndExpr() {
        int pos = currentToken.position;
        Expr left = parseEqualityExpr();
        // continue to build binary logic and expression when there's multiple &&
        while(currentToken.spelling.equals("&&")){
            currentToken = scanner.scan();
            Expr right = parseEqualityExpr();
            left = new BinaryLogicAndExpr(pos, left, right);
        }
        return left;
    }


    // <ComparisonExpr> ::= <RelationalExpr> <equalOrNotEqual> <RelationalExpr> |
    //                      <RelationalExpr>
    // <equalOrNotEqual> ::=  = | !=
    private Expr parseEqualityExpr() {
        int pos = currentToken.position;
        Expr left = parseRelationalExpr();
        // if there's no comparison occurred, return the relational expression
        if(!currentToken.spelling.equals("==") && !currentToken.spelling.equals("!=")){
            return left;
        }
        String op = currentToken.spelling;
        currentToken = scanner.scan();
        Expr right = parseRelationalExpr();

        // if equality is compared, return binary compare equality expression
        if(op.equals("==")){
            return new BinaryCompEqExpr(pos,left,right);
        }
        // otherwise, return binary compare not equal expression
        return new BinaryCompNeExpr(pos,left,right);
    }


    // <RelationalExpr> ::= <AddExpr> | <AddExpr> <ComparisonOp> <AddExpr>
    // <ComparisonOp>::= < | > | <= | >= | INSTANCEOF
    private Expr parseRelationalExpr() {
        int pos = currentToken.position;
        Expr left = parseAddExpr();
        // if the relational expr has no comparison operation, return the first part of the expression
        if((currentToken.kind != COMPARE || currentToken.spelling.equals("==") ||
                currentToken.spelling.equals("!=")) && currentToken.kind != INSTANCEOF){
            return left;
        }
        // take care of the case when comparisonOp is instance of
        if(currentToken.kind == INSTANCEOF){
            currentToken = scanner.scan();
            String type = parseType();
            return new InstanceofExpr(pos,left,type);
        }
        // take care of the rest of the comparison op cases
        String op = currentToken.spelling;
        currentToken = scanner.scan();
        Expr right = parseAddExpr();
        if(op.equals("<")){
            return new BinaryCompLtExpr(pos,left,right);
        }
        if(op.equals(">")){
            return new BinaryCompGtExpr(pos,left,right);
        }
        if(op.equals("<=")){
            return new BinaryCompLeqExpr(pos,left,right);
        }
        return new BinaryCompGeqExpr(pos,left,right);
    }


    // <AddExpr>::＝ <MultExpr> <MoreMultExpr>
    // <MoreMultExpr> ::= EMPTY | + <MultExpr> <MoreMultExpr> | - <MultExpr> <MoreMultExpr>
    private Expr parseAddExpr() {
        int pos = currentToken.position;
        Expr left = parseMultExpr();
        // build the arithmetic plus or minus expression if there's more plus or minus token
        while(currentToken.kind == PLUSMINUS){
            String op = currentToken.spelling;
            currentToken = scanner.scan();
            Expr right =  parseMultExpr();
            if(op.equals("+")){
                left = new BinaryArithPlusExpr(pos,left,right);
            }
            else{
                left = new BinaryArithMinusExpr(pos,left,right);
            }
        }
        return left;
    }


    // <MultiExpr> ::= <NewCastOrUnary> <MoreNCU>
    // <MoreNCU> ::= * <NewCastOrUnary> <MoreNCU> |
    //               / <NewCastOrUnary> <MoreNCU> |
    //               % <NewCastOrUnary> <MoreNCU> |
    //               EMPTY
    private Expr parseMultExpr() {
        int pos = currentToken.position;
        Expr left = parseNewCastOrUnary();

        // build the multi/divide expression if there's more of such token
        while(currentToken.kind == MULDIV){
            String op = currentToken.spelling;
            currentToken = scanner.scan();
            Expr right =  parseNewCastOrUnary();
            if(op.equals("*")){
                left = new BinaryArithTimesExpr(pos,left,right);
            }
            else if(op.equals("/")){
                left = new BinaryArithDivideExpr(pos,left,right);
            }
            else{
                left = new BinaryArithModulusExpr(pos,left,right);
            }
        }
        return left;
    }

    // <NewCastOrUnary> ::= <NewExpression> | <CastExpression> | <UnaryPrefix>
    private Expr parseNewCastOrUnary() {
        if(currentToken.kind == NEW){
            return parseNew();
        }
        if(currentToken.kind == CAST){
            return parseCast();
        }
        return parseUnaryPrefix();
    }


    // <NewExpression> ::= NEW <Identifier> ( )
    private Expr parseNew() {
        int pos = currentToken.position;
        currentToken = scanner.scan();
        String name = parseIdentifier();
        advanceIfTokenMatchesKind(LPAREN);
        advanceIfTokenMatchesKind(RPAREN);
        return new NewExpr(pos, name);
    }


    // <CastExpression> ::= CAST ( <Type> , <Expression> )
    private Expr parseCast() {
        int pos = currentToken.position;
        currentToken = scanner.scan();
        advanceIfTokenMatchesKind(LPAREN);
        String name = parseType();
        advanceIfTokenMatchesKind(COMMA);
        Expr expr = parseExpression();
        advanceIfTokenMatchesKind(RPAREN);
        return new CastExpr(pos, name, expr);
    }


    // <UnaryPrefix> ::= <PrefixOp> <UnaryPreFix> | <UnaryPostfix>
    // <PrefixOp> ::= - | ! | ++ | --
    private Expr parseUnaryPrefix() {
        int pos = currentToken.position;
        String sp = currentToken.spelling;
        Expr expr = null;
        if(sp.equals("-")){
            currentToken = scanner.scan();
            expr = parseUnaryPrefix();
            return new UnaryNegExpr(pos, expr);
        }
        if(sp.equals("!")){
            currentToken = scanner.scan();
            expr = parseUnaryPrefix();
            return new UnaryNotExpr(pos, expr);
        }
        if(sp.equals("++")){
            currentToken = scanner.scan();
            expr = parseUnaryPrefix();
            return new UnaryIncrExpr(pos, expr, false);
        }
        if(sp.equals("--")){
            currentToken = scanner.scan();
            expr = parseUnaryPrefix();
            return new UnaryDecrExpr(pos, expr, false);
        }
        return parseUnaryPostfix();
    }


    // <UnaryPostfix> ::= <Primary> <PostfixOp>
    // <PostfixOp> ::= ++ | -- | EMPTY
    private Expr parseUnaryPostfix() {
        int pos = currentToken.position;
        Expr expr = parsePrimary();
        if(currentToken.spelling.equals("++")){
            currentToken = scanner.scan();
            return new UnaryIncrExpr(pos, expr, true);
        }
        if(currentToken.spelling.equals("--")){
            currentToken = scanner.scan();
            return new UnaryDecrExpr(pos, expr, true);
        }
        return expr;
    }


    // <Primary> ::= ( <Expression> ) | <IntegerConst> | <BooleanConst> |
    //                              <StringConst> | <VarExpr>
    // <VarExpr> ::= <VarExprPrefix> <Identifier> <VarExprSuffix>
    // <VarExprPrefix> ::= SUPER . | THIS . | EMPTY
    // <VarExprSuffix> ::= . <Identifier> ( <Arguments> ) | ( <Arguments>) | EMPTY
    private Expr parsePrimary() {
        int pos = currentToken.position;
        // check if this is an expression
        if(currentToken.kind == LPAREN){
            currentToken = scanner.scan();
            Expr expr = parseExpression();
            advanceIfTokenMatchesKind(RPAREN);
            return expr;
        }
        // check if this is an Integer Constant Expression
        if(currentToken.kind == INTCONST){
            String intCont = currentToken.getSpelling();
            currentToken = scanner.scan();
            return new ConstIntExpr(pos, intCont);
        }
        // check if this is a boolean Constant expression
        if(currentToken.kind == BOOLEAN){
            String boolVal = currentToken.getSpelling();
            currentToken = scanner.scan();
            return new ConstBooleanExpr(pos, boolVal);
        }
        // check if this is a string constant expression
        if(currentToken.kind == STRCONST){
            String strConst = currentToken.getSpelling();
            currentToken = scanner.scan();
            return new ConstStringExpr(pos, strConst);
        }
        Expr ref = null;
        if(currentToken.spelling.equals("super") || currentToken.spelling.equals("this")){
            ref = new VarExpr(pos, null, currentToken.spelling);
            currentToken = scanner.scan();
            if(currentToken.kind != DOT){
                return ref;
            }
            currentToken = scanner.scan();
        }
        String name = parseIdentifier();
//        ref = new VarExpr(pos,ref,name);

        if(currentToken.kind != DOT && currentToken.kind != LPAREN){
            return new VarExpr(pos,ref,name);
        }

        if(currentToken.kind == DOT){
            pos = currentToken.position;
            currentToken = scanner.scan();
            ref = new VarExpr(pos,ref,name);
            name = parseIdentifier();
        }

        advanceIfTokenMatchesKind(LPAREN);
        ExprList args = parseArguments();
        advanceIfTokenMatchesKind(RPAREN);
        return new DispatchExpr(pos, ref, name, args);
    }


    // <Arguments> ::= EMPTY | <Expression> <MoreArgs>
    // <MoreArgs>  ::= EMPTY | , <Expression> <MoreArgs>
    private ExprList parseArguments() {
        ExprList exprList = new ExprList(currentToken.position);
        if(currentToken.kind != RPAREN){
            exprList.addElement(parseExpression());
            while(currentToken.kind == COMMA){
                currentToken = scanner.scan();
                exprList.addElement(parseExpression());
            }
        }
        return exprList;
    }


    // <Parameters> ::=  EMPTY | <Formal> <MoreFormals>
    // <MoreFormals> ::= EMPTY | , <Formal> <MoreFormals
    private FormalList parseParameters() {
        FormalList formalList = new FormalList(currentToken.position);

        if(currentToken.kind != RPAREN){
            formalList.addElement(parseFormal());
            while(currentToken.kind == COMMA){
                currentToken = scanner.scan();
                formalList.addElement(parseFormal());
            }
        }
        return formalList;
    }


    // <Formal> ::= <Type> <Identifier>
    private Formal parseFormal() {
        int pos = currentToken.position;
        String type = parseType();
        String name = parseIdentifier();
        return new Formal(pos, type, name);
    }


    // <Type> ::= <Identifier>
    private String parseType() {
        return parseIdentifier();
    }


    //----------------------------------------
    //Terminals

    private String parseIdentifier() {
        if(currentToken.kind != IDENTIFIER){
            errorHandler.register(Error.Kind.PARSE_ERROR, "Expecting Identifier, found " + currentToken.kind+" at line "+currentToken.position);
            throw new CompilationException(errorHandler);
        }
        String name = currentToken.spelling;
        currentToken = scanner.scan();
        return name;
    }

    /**
     * advance to the next token if the current token kind matches the expected token kind
     * @param expectedKind the expected token kind
     */
    private void advanceIfTokenMatchesKind(Token.Kind expectedKind){
        Token.Kind currentKind = currentToken.kind;
        if(currentKind == expectedKind){
            currentToken = scanner.scan();
        }
        // if the token doesn't match, register an error message with the line number and expected token vs. what's input
        else{
            errorHandler.register(Error.Kind.PARSE_ERROR, "Expecting "+expectedKind+" at line "+currentToken.position
                    +", but "+currentKind+" was found");
            throw new CompilationException(errorHandler);
        }
    }

    /**
     * The main method to run test files through the parser and print
     * status to the console.
     * @param args the files to test on.
     */
    public static void main(String[] args){
        String[] files;
        if(args.length < 1){
            files = new String[1];
            files[0] = ("ParserTestEnglishHillisonQian.btm");
        } else {
            files = args;
        }

        ErrorHandler errorHandler = new ErrorHandler();

        for(String file: files){
            System.out.println("Running file: " + file);
            Program program;
            try{
                Parser parser = new Parser(errorHandler);
                 program = parser.parse(file);

                if(errorHandler.errorsFound()){
                    System.out.println("Error Tokens Found:\n" + errorHandler.getErrorList());
                    continue;
                }
                // clear error handler before parsing the next file
                errorHandler.clear();
            }
            catch (CompilationException e){
                System.out.println("Compilation error: " + e.getErrorHandler().getErrorList());
                continue;
            }
            errorHandler.clear();
            System.out.println("Scan and Parse Successful");
            Drawer drawer = new Drawer();
            drawer.draw(file, program);
        }
    }

}

